#!/bin/bash
set -euo pipefail

SHOW_ANNOTATION=true
INCLUDE_DIFF=true
FALLBACK_COMMIT_COUNT="${BUILDKITE_PLUGIN_FALLBACK_COMMIT_COUNT:-5}"

ORGANIZATION="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_ORGANIZATION:-}"
PIPELINE="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_PIPELINE:-}"
BRANCH="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_BRANCH:-main}"
STATE="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_STATE:-}"
FROM_COMMIT="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_FROM:-}"
TO_COMMIT="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_TO:-$(git rev-parse HEAD)}"
DETAILED="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_DETAILED:-false}"
EXPLICIT_TOKEN="${BUILDKITE_PLUGIN_LAST_SUCCESSFUL_COMMITS_CHANGES_API_TOKEN:-}"

get_last_commit_from_buildkite() {
  local org="$1"
  local pipeline="$2"
  local branch="$3"
  local state="$4"
  local token="$5"

  local state_filter=""
  if [[ -n "$state" ]]; then
    state_filter="state: [$state],"
  else
    state_filter="state: [PASSED, FAILED, CANCELED, SCHEDULED, BLOCKED],"
  fi

  local query=$(cat <<EOF
{
  pipeline(slug: "$org/$pipeline") {
    builds(first: 1, branch: "$branch", $state_filter) {
      edges {
        node {
          commit
          branch
          state
        }
      }
    }
  }
}
EOF
)

  >&2 echo "--- Sending GraphQL query to fetch last commit with state: ${state:-default fallback}"
  >&2 echo "$query"

  local response=$(curl -sS -X POST https://graphql.buildkite.com/v1 \
    -H "Authorization: Bearer $token" \
    -H "Content-Type: application/json" \
    -d "$(jq -n --arg q "$query" '{query: $q}')")

  >&2 echo "--- Raw response from Buildkite GraphQL (commit query):"
  >&2 echo "$response" | jq .

  echo "$response" | jq -r '.data.pipeline.builds.edges[0].node.commit // empty'
}

# Fetch FROM_COMMIT if not given
if [[ -z "$FROM_COMMIT" ]]; then
  API_TOKEN="$EXPLICIT_TOKEN"

  if [[ -z "$API_TOKEN" ]]; then
    echo "--- No token passed via plugin config. Trying Buildkite secret 'changes_api_token'..."
    API_TOKEN="$(buildkite-agent secret get changes_api_token || true)"
  fi

  if [[ -z "$API_TOKEN" ]]; then
    echo "‚ùå API token is required (either via 'changes_api_token' plugin input or Buildkite secret)"
    exit 1
  fi

  echo "--- Fetching last commit for $BRANCH (state: ${STATE:-default})"
  FROM_COMMIT=$(get_last_commit_from_buildkite "$ORGANIZATION" "$PIPELINE" "$BRANCH" "$STATE" "$API_TOKEN")
fi

echo "--- Comparing commits"
echo "    From: $FROM_COMMIT"
echo "    To:   $TO_COMMIT"

if [[ -n "$FROM_COMMIT" && "$FROM_COMMIT" == "$TO_COMMIT" ]]; then
  echo "‚úÖ No new commits. Skipping build."
  buildkite-agent annotate "üü¢ No new commits since last successful build on \`$BRANCH\`. Skipping the rest of the build." --style "info"
  buildkite-agent pipeline upload <<YAML
steps: []
YAML
  exit 0
fi

# Generate changelog
echo "--- Generating changelog"
if [[ -z "$FROM_COMMIT" || "$FROM_COMMIT" == "null" ]]; then
  echo "‚ö†Ô∏è No prior commit found ‚Äî showing last $FALLBACK_COMMIT_COUNT commits"
  CHANGELOG=$(git log -n "$FALLBACK_COMMIT_COUNT" --pretty=format:"- %h %an: %s")
else
  CHANGELOG=$(git log "${FROM_COMMIT}..${TO_COMMIT}" --pretty=format:"- %h %an: %s")
fi

if [[ -z "$CHANGELOG" || "$CHANGELOG" == $'\n' ]]; then
  CHANGELOG="(No new commits found)"
fi

# Optional file diff
if [[ -n "$FROM_COMMIT" && "$INCLUDE_DIFF" == "true" ]]; then
  echo "--- Checking for changed files (detailed: $DETAILED)"
  if [[ "$DETAILED" == "true" ]]; then
    FILE_DIFF=$(git diff "${FROM_COMMIT}..${TO_COMMIT}" || true)
  else
    FILE_DIFF=$(git diff --name-status "${FROM_COMMIT}..${TO_COMMIT}" || true)
  fi

  if [[ -n "$FILE_DIFF" && "$FILE_DIFF" != $'\n' ]]; then
    echo "$FILE_DIFF"
    CHANGELOG+="

üóÇÔ∏è **Changed Files:**
\`\`\`
$FILE_DIFF
\`\`\`
"
  else
    echo "--- No file changes detected"
    CHANGELOG+="

üóÇÔ∏è **Changed Files:**
(none)"
  fi
fi

# Annotate
if [[ "$SHOW_ANNOTATION" == "true" ]]; then
  buildkite-agent annotate --style "info" "### üöÄ Commits between:
\`${FROM_COMMIT:-<unknown>}\` ‚Üí \`$TO_COMMIT\`

$CHANGELOG"
fi
